---
source: xee-qt/src/load.rs
expression: "qt::TestSet::load_from_xml(&mut xot, ROOT_FIXTURE).unwrap()"
---
TestSet {
    name: "fn-root",
    descriptions: [
        "Tests for the root() function",
    ],
    dependencies: [],
    shared_environments: SharedEnvironments {
        environments: {
            "lang": EnvironmentSpec {
                schemas: [],
                sources: [
                    Source {
                        metadata: Metadata {
                            description: Some(
                                "Data for fn:lang tests.",
                            ),
                            created: Some(
                                Attribution {
                                    by: "Carmelo Montanez",
                                    on: "2005-10-19",
                                },
                            ),
                            modified: [],
                        },
                        role: Context,
                        file: "lang/lang.xml",
                    },
                ],
                resources: [],
                params: [],
                context_items: [],
                decimal_formats: [],
                namespaces: [],
                function_libraries: [],
                collections: [],
                static_base_uris: [],
                collations: [],
            },
            "empty": EnvironmentSpec {
                schemas: [],
                sources: [],
                resources: [],
                params: [],
                context_items: [],
                decimal_formats: [],
                namespaces: [],
                function_libraries: [],
                collections: [],
                static_base_uris: [],
                collations: [],
            },
        },
    },
    test_cases: [
        TestCase {
            name: "fn-root-1",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with no arguments and no context node set. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-09-20",
                    },
                ),
                modified: [],
            },
            environments: [
                Ref(
                    EnvironmentRef {
                        ref_: "empty",
                    },
                ),
            ],
            dependencies: [],
            modules: [],
            test: "fn:root()",
            result: Error(
                "XPDY0002",
            ),
        },
        TestCase {
            name: "fn-root-2",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with no arguments that uses context node, which is not a node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [
                    Modification {
                        attribution: Attribution {
                            by: "Christian Gruen",
                            on: "2020-01-17",
                        },
                        description: "alternative solution added for pre-evaluated expressions",
                    },
                ],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "(1 to 100)[fn:root()]",
            result: AnyOf(
                [
                    AssertCount(
                        100,
                    ),
                    Error(
                        "XPTY0004",
                    ),
                ],
            ),
        },
        TestCase {
            name: "fn-root-2a",
            metadata: Metadata {
                description: Some(
                    " Expression with fn:root function that may be pre-evaluated. ",
                ),
                created: Some(
                    Attribution {
                        by: "Christian Gruen",
                        on: "2020-01-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "1 = (1, fn:root(1[. = 1]))",
            result: AnyOf(
                [
                    AssertTrue,
                    Error(
                        "XPTY0004",
                    ),
                ],
            ),
        },
        TestCase {
            name: "fn-root-2b",
            metadata: Metadata {
                description: Some(
                    " Expression with fn:root function that may be pre-evaluated. ",
                ),
                created: Some(
                    Attribution {
                        by: "Christian Gruen",
                        on: "2020-01-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "exists(1 = fn:root(1[. = 1]))",
            result: AnyOf(
                [
                    AssertTrue,
                    Error(
                        "XPTY0004",
                    ),
                ],
            ),
        },
        TestCase {
            name: "fn-root-3",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to the empty sequence. Use count to avoid empty file. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "fn:count(fn:root(()))",
            result: AnyOf(
                [
                    AssertEq(
                        XPathExpr(
                            "0",
                        ),
                    ),
                    Error(
                        "XPST0005",
                    ),
                ],
            ),
        },
        TestCase {
            name: "fn-root-4",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to a comment node (via a variable). ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := <!-- A Comment Node --> return fn:root($var)",
            result: AssertXml(
                "<!-- A Comment Node -->",
            ),
        },
        TestCase {
            name: "fn-root-5",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to a comment node set directly on argument. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(<!-- A Comment Node -->)",
            result: AssertXml(
                "<!-- A Comment Node -->",
            ),
        },
        TestCase {
            name: "fn-root-6",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an elemnt node set via a variable. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := <anElement>An Element Content</anElement> return fn:root($var)",
            result: AssertXml(
                "<anElement>An Element Content</anElement>",
            ),
        },
        TestCase {
            name: "fn-root-7",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an direct element node by setting directly on argument. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(<anElement>An Element Content</anElement>)",
            result: AssertXml(
                "<anElement>An Element Content</anElement>",
            ),
        },
        TestCase {
            name: "fn-root-8",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an processing instruction node by setting via a variable. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := <?format role=\"output\" ?> return fn:root($var)",
            result: AssertXml(
                "<?format role=\"output\" ?>",
            ),
        },
        TestCase {
            name: "fn-root-9",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an direct element node by setting directly on argument. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(<?format role=\"output\" ?>)",
            result: AssertXml(
                "<?format role=\"output\" ?>",
            ),
        },
        TestCase {
            name: "fn-root-10",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an computed element with attribute node by setting via a variable. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := element anElement {attribute anAttribute {\"Attribute Value\"}} return fn:root($var)",
            result: AssertXml(
                "<anElement anAttribute=\"Attribute Value\"/>",
            ),
        },
        TestCase {
            name: "fn-root-11",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an computed element with attribute node by setting directly on argument. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(element anElement {attribute anAttribute {\"Attribute Value\"}})",
            result: AssertXml(
                "<anElement anAttribute=\"Attribute Value\"/>",
            ),
        },
        TestCase {
            name: "fn-root-12",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to a document node by setting via a variable. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := document {<anElement><anInternalElement>element content</anInternalElement></anElement>} return fn:root($var)",
            result: AssertXml(
                "<anElement><anInternalElement>element content</anInternalElement></anElement>",
            ),
        },
        TestCase {
            name: "fn-root-13",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to an computed document node by setting directly on argument. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(document {<anElement><anInternalElement>element content</anInternalElement></anElement>})",
            result: AssertXml(
                "<anElement><anInternalElement>element content</anInternalElement></anElement>",
            ),
        },
        TestCase {
            name: "fn-root-14",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to a element node by quering an xml file. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [
                    Modification {
                        attribution: Attribution {
                            by: "Christian Gruen",
                            on: "2016-01-12",
                        },
                        description: "Reflect changes in lang.xml",
                    },
                ],
            },
            environments: [
                Ref(
                    EnvironmentRef {
                        ref_: "lang",
                    },
                ),
            ],
            dependencies: [],
            modules: [],
            test: "fn:root(fn:exactly-one(/langs[1]/para[1]))",
            result: AssertXml(
                "<langs>\n <para xml:lang=\"en\"/>\n <div xml:lang=\"en\"><para>And now, and forever!</para></div>\n <para xml:lang=\"EN\"/>\n <para xml:lang=\"en-us\"/>\n <para xml:lang=\"de-DE-1996\">New German Orthography</para>\n</langs>",
            ),
        },
        TestCase {
            name: "fn-root-15",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to a attribute node by quering an xml file. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [
                    Modification {
                        attribution: Attribution {
                            by: "Christian Gruen",
                            on: "2016-01-12",
                        },
                        description: "Reflect changes in lang.xml",
                    },
                ],
            },
            environments: [
                Ref(
                    EnvironmentRef {
                        ref_: "lang",
                    },
                ),
            ],
            dependencies: [],
            modules: [],
            test: "fn:root(/langs[1]/para[1]/@xml:lang)",
            result: AssertXml(
                "<langs>\n <para xml:lang=\"en\"/>\n <div xml:lang=\"en\"><para>And now, and forever!</para></div>\n <para xml:lang=\"EN\"/>\n <para xml:lang=\"en-us\"/>\n <para xml:lang=\"de-DE-1996\">New German Orthography</para>\n</langs>",
            ),
        },
        TestCase {
            name: "fn-root-16",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to computed text node by setting directly on argument. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(text {\"A text Node\"})",
            result: AssertStringValue(
                "A text Node",
            ),
        },
        TestCase {
            name: "fn-root-17",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to computed text node by setting argument vias a variable. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := text {\"a text Node\"} return fn:root($var)",
            result: AssertStringValue(
                "a text Node",
            ),
        },
        TestCase {
            name: "fn-root-18",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function used in conjunction with \"is\" operator (returns true). ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := element anElement {\"Element Content\"} return fn:root($var) is fn:root($var)",
            result: AssertTrue,
        },
        TestCase {
            name: "fn-root-19",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function used in conjunction with \"is\" operator (returns false). ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := element anElement {\"Element Content\"} return fn:root($var) is fn:root($var)",
            result: AssertTrue,
        },
        TestCase {
            name: "fn-root-20",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function used as argument to namespace-uri function (use an element). \n        Use fn:count to avoid empty file ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := element anElement {\"Element Content\"} return fn:count(fn:namespace-uri(fn:root($var)))",
            result: AssertEq(
                XPathExpr(
                    "1",
                ),
            ),
        },
        TestCase {
            name: "fn-root-21",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function used as argument to namespace-uri function (use a comment). \n        Use fn:count to avoid empty file ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := <!-- An Element Node --> return fn:count(fn:namespace-uri(fn:root($var)))",
            result: AssertEq(
                XPathExpr(
                    "1",
                ),
            ),
        },
        TestCase {
            name: "fn-root-22",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function used as argument to namespace-uri function (use a Processing Instruction). \n        Use fn:count to avoid empty file ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := <?format role=\"output\" ?> return fn:count(fn:namespace-uri(fn:root($var)))",
            result: AssertEq(
                XPathExpr(
                    "1",
                ),
            ),
        },
        TestCase {
            name: "fn-root-23",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function used as argument to namespace-uri function (use a text node). use fn:count to avoid empty file ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2005-11-17",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "let $var := text {\"A text node\"} return fn:count(fn:namespace-uri(fn:root($var)))",
            result: AssertEq(
                XPathExpr(
                    "1",
                ),
            ),
        },
        TestCase {
            name: "fn-root-24",
            metadata: Metadata {
                description: Some(
                    " Evaluation of the fn:root function with argument set to \".\" and no context node set. ",
                ),
                created: Some(
                    Attribution {
                        by: "Carmelo Montanez",
                        on: "2006-02-08",
                    },
                ),
                modified: [],
            },
            environments: [
                Ref(
                    EnvironmentRef {
                        ref_: "empty",
                    },
                ),
            ],
            dependencies: [],
            modules: [],
            test: "fn:root(.)",
            result: Error(
                "XPDY0002",
            ),
        },
        TestCase {
            name: "K-NodeRootFunc-1",
            metadata: Metadata {
                description: Some(
                    " A test whose essence is: `Root(2)`. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "Root(2)",
            result: Error(
                "XPST0017",
            ),
        },
        TestCase {
            name: "K-NodeRootFunc-2",
            metadata: Metadata {
                description: Some(
                    " A test whose essence is: `(1, 2, 3)[root()]`. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [
                    Modification {
                        attribution: Attribution {
                            by: "Michael Kay",
                            on: "2018-05-22",
                        },
                        description: "prevent over-eager optimization: root() must deliver a single node or an error,                  therefore the predicate [root()] can be optimized to [true()]",
                    },
                    Modification {
                        attribution: Attribution {
                            by: "Benito van der Zander",
                            on: "2020-09-24",
                        },
                        description: "add missing spec dependencies",
                    },
                ],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XP30+",
                    },
                    satisfied: true,
                },
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ30+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "(1, 2, 3)[root()[generate-id() != '***']]",
            result: Error(
                "XPTY0004",
            ),
        },
        TestCase {
            name: "K-NodeRootFunc-3",
            metadata: Metadata {
                description: Some(
                    " A test whose essence is: `root(2)`. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "root(2)",
            result: Error(
                "XPTY0004",
            ),
        },
        TestCase {
            name: "K-NodeRootFunc-4",
            metadata: Metadata {
                description: Some(
                    " A test whose essence is: `empty(root(()))`. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [],
            modules: [],
            test: "empty(root(()))",
            result: AnyOf(
                [
                    AssertTrue,
                    Error(
                        "XPST0005",
                    ),
                ],
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-1",
            metadata: Metadata {
                description: Some(
                    " Apply fn:root() to a directly constructed element. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(<e/>)",
            result: AssertXml(
                "<e/>",
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-2",
            metadata: Metadata {
                description: Some(
                    " Apply fn:root() to an empty sequence coming from a parent axis. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "empty(fn:root(<e/>/..))",
            result: AssertTrue,
        },
        TestCase {
            name: "K2-NodeRootFunc-3",
            metadata: Metadata {
                description: Some(
                    " Invoke on a comment node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(<!-- comment -->)",
            result: AssertXml(
                "<!-- comment -->",
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-4",
            metadata: Metadata {
                description: Some(
                    " Invoke on an attribute node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "<e>{fn:root(attribute name {\"value\"})}</e>",
            result: AssertXml(
                "<e name=\"value\"/>",
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-5",
            metadata: Metadata {
                description: Some(
                    " Invoke on a processing instruction node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(<?target data?>)",
            result: AssertXml(
                "<?target data?>",
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-6",
            metadata: Metadata {
                description: Some(
                    " Invoke on a processing instruction node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(text{\"text node\"})",
            result: AssertStringValue(
                "text node",
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-7",
            metadata: Metadata {
                description: Some(
                    " Invoke on a processing instruction node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "fn:root(text{\"text node\"})",
            result: AssertStringValue(
                "text node",
            ),
        },
        TestCase {
            name: "K2-NodeRootFunc-8",
            metadata: Metadata {
                description: Some(
                    " Invoke on a single document node. ",
                ),
                created: Some(
                    Attribution {
                        by: "Frans Englich",
                        on: "2007-11-26",
                    },
                ),
                modified: [],
            },
            environments: [],
            dependencies: [
                Dependency {
                    spec: DependencySpec {
                        type_: "spec",
                        value: "XQ10+",
                    },
                    satisfied: true,
                },
            ],
            modules: [],
            test: "root(document {()}) instance of document-node()",
            result: AssertTrue,
        },
    ],
}
