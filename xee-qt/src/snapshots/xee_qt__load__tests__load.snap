---
source: xee-qt/src/load.rs
expression: "load_from_xml(&mut xot, ROOT_FIXTURE).unwrap()"
---
[
    TestCase {
        name: "fn-root-1",
        description: " Evaluation of the fn:root function with no arguments and no context node set. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-09-20",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "fn:root()",
        result: Error(
            "XPDY0002",
        ),
    },
    TestCase {
        name: "fn-root-2",
        description: " Evaluation of the fn:root function with no arguments that uses context node, which is not a node. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [
            Modification {
                attribution: Attribution {
                    by: "Christian Gruen",
                    on: "2020-01-17",
                },
                description: "alternative solution added for pre-evaluated expressions",
            },
        ],
        environments: [],
        dependencies: [],
        modules: [],
        test: "(1 to 100)[fn:root()]",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-2a",
        description: " Expression with fn:root function that may be pre-evaluated. ",
        created: Attribution {
            by: "Christian Gruen",
            on: "2020-01-17",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "1 = (1, fn:root(1[. = 1]))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-2b",
        description: " Expression with fn:root function that may be pre-evaluated. ",
        created: Attribution {
            by: "Christian Gruen",
            on: "2020-01-17",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "exists(1 = fn:root(1[. = 1]))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-3",
        description: " Evaluation of the fn:root function with argument set to the empty sequence. Use count to avoid empty file. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "fn:count(fn:root(()))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-4",
        description: " Evaluation of the fn:root function with argument set to a comment node (via a variable). ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := <!-- A Comment Node --> return fn:root($var)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-5",
        description: " Evaluation of the fn:root function with argument set to a comment node set directly on argument. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(<!-- A Comment Node -->)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-6",
        description: " Evaluation of the fn:root function with argument set to an elemnt node set via a variable. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := <anElement>An Element Content</anElement> return fn:root($var)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-7",
        description: " Evaluation of the fn:root function with argument set to an direct element node by setting directly on argument. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(<anElement>An Element Content</anElement>)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-8",
        description: " Evaluation of the fn:root function with argument set to an processing instruction node by setting via a variable. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := <?format role=\"output\" ?> return fn:root($var)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-9",
        description: " Evaluation of the fn:root function with argument set to an direct element node by setting directly on argument. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(<?format role=\"output\" ?>)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-10",
        description: " Evaluation of the fn:root function with argument set to an computed element with attribute node by setting via a variable. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := element anElement {attribute anAttribute {\"Attribute Value\"}} return fn:root($var)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-11",
        description: " Evaluation of the fn:root function with argument set to an computed element with attribute node by setting directly on argument. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(element anElement {attribute anAttribute {\"Attribute Value\"}})",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-12",
        description: " Evaluation of the fn:root function with argument set to a document node by setting via a variable. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := document {<anElement><anInternalElement>element content</anInternalElement></anElement>} return fn:root($var)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-13",
        description: " Evaluation of the fn:root function with argument set to an computed document node by setting directly on argument. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(document {<anElement><anInternalElement>element content</anInternalElement></anElement>})",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-14",
        description: " Evaluation of the fn:root function with argument set to a element node by quering an xml file. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [
            Modification {
                attribution: Attribution {
                    by: "Christian Gruen",
                    on: "2016-01-12",
                },
                description: "Reflect changes in lang.xml",
            },
        ],
        environments: [],
        dependencies: [],
        modules: [],
        test: "fn:root(fn:exactly-one(/langs[1]/para[1]))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-15",
        description: " Evaluation of the fn:root function with argument set to a attribute node by quering an xml file. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [
            Modification {
                attribution: Attribution {
                    by: "Christian Gruen",
                    on: "2016-01-12",
                },
                description: "Reflect changes in lang.xml",
            },
        ],
        environments: [],
        dependencies: [],
        modules: [],
        test: "fn:root(/langs[1]/para[1]/@xml:lang)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-16",
        description: " Evaluation of the fn:root function with argument set to computed text node by setting directly on argument. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(text {\"A text Node\"})",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-17",
        description: " Evaluation of the fn:root function with argument set to computed text node by setting argument vias a variable. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := text {\"a text Node\"} return fn:root($var)",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-18",
        description: " Evaluation of the fn:root function used in conjunction with \"is\" operator (returns true). ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := element anElement {\"Element Content\"} return fn:root($var) is fn:root($var)",
        result: AssertTrue,
    },
    TestCase {
        name: "fn-root-19",
        description: " Evaluation of the fn:root function used in conjunction with \"is\" operator (returns false). ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := element anElement {\"Element Content\"} return fn:root($var) is fn:root($var)",
        result: AssertTrue,
    },
    TestCase {
        name: "fn-root-20",
        description: " Evaluation of the fn:root function used as argument to namespace-uri function (use an element). \n        Use fn:count to avoid empty file ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := element anElement {\"Element Content\"} return fn:count(fn:namespace-uri(fn:root($var)))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-21",
        description: " Evaluation of the fn:root function used as argument to namespace-uri function (use a comment). \n        Use fn:count to avoid empty file ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := <!-- An Element Node --> return fn:count(fn:namespace-uri(fn:root($var)))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-22",
        description: " Evaluation of the fn:root function used as argument to namespace-uri function (use a Processing Instruction). \n        Use fn:count to avoid empty file ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := <?format role=\"output\" ?> return fn:count(fn:namespace-uri(fn:root($var)))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-23",
        description: " Evaluation of the fn:root function used as argument to namespace-uri function (use a text node). use fn:count to avoid empty file ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2005-11-17",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "let $var := text {\"A text node\"} return fn:count(fn:namespace-uri(fn:root($var)))",
        result: AssertFalse,
    },
    TestCase {
        name: "fn-root-24",
        description: " Evaluation of the fn:root function with argument set to \".\" and no context node set. ",
        created: Attribution {
            by: "Carmelo Montanez",
            on: "2006-02-08",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "fn:root(.)",
        result: Error(
            "XPDY0002",
        ),
    },
    TestCase {
        name: "K-NodeRootFunc-1",
        description: " A test whose essence is: `Root(2)`. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "Root(2)",
        result: Error(
            "XPST0017",
        ),
    },
    TestCase {
        name: "K-NodeRootFunc-2",
        description: " A test whose essence is: `(1, 2, 3)[root()]`. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [
            Modification {
                attribution: Attribution {
                    by: "Michael Kay",
                    on: "2018-05-22",
                },
                description: "prevent over-eager optimization: root() must deliver a single node or an error,                  therefore the predicate [root()] can be optimized to [true()]",
            },
            Modification {
                attribution: Attribution {
                    by: "Benito van der Zander",
                    on: "2020-09-24",
                },
                description: "add missing spec dependencies",
            },
        ],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XP30+ XQ30+",
            },
        ],
        modules: [],
        test: "(1, 2, 3)[root()[generate-id() != '***']]",
        result: Error(
            "XPTY0004",
        ),
    },
    TestCase {
        name: "K-NodeRootFunc-3",
        description: " A test whose essence is: `root(2)`. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "root(2)",
        result: Error(
            "XPTY0004",
        ),
    },
    TestCase {
        name: "K-NodeRootFunc-4",
        description: " A test whose essence is: `empty(root(()))`. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [],
        modules: [],
        test: "empty(root(()))",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-1",
        description: " Apply fn:root() to a directly constructed element. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(<e/>)",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-2",
        description: " Apply fn:root() to an empty sequence coming from a parent axis. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "empty(fn:root(<e/>/..))",
        result: AssertTrue,
    },
    TestCase {
        name: "K2-NodeRootFunc-3",
        description: " Invoke on a comment node. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(<!-- comment -->)",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-4",
        description: " Invoke on an attribute node. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "<e>{fn:root(attribute name {\"value\"})}</e>",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-5",
        description: " Invoke on a processing instruction node. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(<?target data?>)",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-6",
        description: " Invoke on a processing instruction node. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(text{\"text node\"})",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-7",
        description: " Invoke on a processing instruction node. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "fn:root(text{\"text node\"})",
        result: AssertFalse,
    },
    TestCase {
        name: "K2-NodeRootFunc-8",
        description: " Invoke on a single document node. ",
        created: Attribution {
            by: "Frans Englich",
            on: "2007-11-26",
        },
        modified: [],
        environments: [],
        dependencies: [
            Dependency {
                type_: "spec",
                value: "XQ10+",
            },
        ],
        modules: [],
        test: "root(document {()}) instance of document-node()",
        result: AssertTrue,
    },
]
